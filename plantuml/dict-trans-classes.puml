interface TranslateInterface {

   public function translate(string $str, string $dest_lang, string $src_lang="") : string;
   public function getTranslationLanguages() : array;
}

interface DictionaryInterface {
   
   public function lookup(string $str, string $src_lang, string $dest_lang) : \Iterator
   public function getDictionaryLanguages() : array
}

class RestApi {

   public  __construct(string $bas private $headers = array()
   protected function request(string $method, string $route, array $options = array()) : string
}

class ResultsIterator extends \ArrayIterator {
  
   public function __construct(array $results, callable $func)
}

class  LookupResult {

   public function __construct(public readonly string $word, public readonly string $pos, public readonly array $definitions) 
}

class LookupIterator extends ResultsIterator { 
 
    private array $results;
 
    public function __construct(array $results, callable $call)
    { 
       parent::__construct($results, $call);
    }
    
    public function current() : LookupResult
    { 
        return parent::current();
    }
}
