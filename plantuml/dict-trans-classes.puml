interface TranslateInterface {
   public function translate(string $str, string $dest_lang, string $src_lang="") : string;
   public function getTranslationLanguages() : array;
}

interface DictionaryInterface {
   public function lookup(string $str, string $src_lang, string $dest_lang) : \Iterator
   public function getDictionaryLanguages() : array
}

interface SentenceFetchInterface  { 
   fetch(string word, int count=3) : ResultsIterator;
}

class ResultsIterator extends \ArrayIterator {
    public function __construct(array $results, callable $func)
}
class RestApi {
   public  __construct(string $bas private $headers = array()
   protected function request(string $method, string $route, array $options = array()) : string
}

class LeipzigSentenceFetcher extends RestApi implements SentenceFetchInterface {
  
   public function __construct(Config $c)  
   public function fetch(string $word, int $count=3) : ResultsIterator  
}

class ResultsIterator extends \ArrayIterator {
   public function __construct(array $results, callable $func)
   public function current() : mixed
}

class  LookupResult {
   public function __construct(public readonly string $word, public readonly string $pos, public readonly array $definitions) 
}

class LookupIterator extends ResultsIterator { 
    public function __construct(array $results, callable $call)
    public function current() : LookupResult
}

class SystranTranslator extends RestApi implements TranslateInterface, DictionaryInterface {
   public function __construct(ConfigFile $c)
   public function getTranslationLanguages() : array
   final public function getDictionaryLanguages() : array
   final public function lookup(string $word, string $src, string $dest) : LookupIterator
   final public function translate(string $text, string $dest, $src="") : string 
}

// The other dictionary lookup and translation classes are similiar to SystranTranslate.
